TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

class LPFile():
    def __init__(self, filename, create):
        # Globals
        mycontext['debug'] = False
        
        self.filename = filename  # Keep track of the filename
        self.is_open = True  # Track if the file is open
        self.default_exists = 'default' in listfiles()

        if not create and self.default_exists:
            # If creating a file, use the default template
            default_file = openfile('default', False)
            content = default_file.readat(None, 0)  # Read from the default file
            self.LPfile = openfile(filename, True)
            self.LPfile.writeat(content, 0)  # Write default content to new file
            default_file.close()
        else:
            # Open the file normally
            self.LPfile = openfile(filename, create)

    def readat(self, num_bytes, offset):
        if not self.is_open:
            raise Exception("File is closed.")
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        if not self.is_open:
            raise Exception("File is closed.")
        self.LPfile.writeat(data, offset)

    def close(self):
        self.is_open = False  # Mark file as closed
        self.LPfile.close()

def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    removefile(filename)
    # Check if 'default' file exists, and if so, delete all closed files
    if 'default' in listfiles():
        for file in listfiles():
            if file != 'default' and not is_file_open(file):
                removefile(file)

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()
